#!/bin/sh

# fuzzy file open
ff() { 
    choice=$( \
        find -type f \
        |  fzf --preview "bat --color always --style=plain {1}" \
        --bind=space:toggle-preview \
        --preview-window '30%,right,border-left,<30(down,30%,border-top)' \
        --border=rounded \
        --margin=1% \
        --color=dark \
        --color='pointer:12,bg+:8' \
        --height 100% \
        --reverse \
        --no-scrollbar \
        --header='find file ' \
        --info=inline-right \
        --header-first \
        --prompt " ") \

        if [ $choice ]
        then
            nvim $choice
        else
            return 1
        fi
    }

# fuzzy jump directory
fj() { 
    choice=$( \
        find -type d \
        | fzf --preview "exa --oneline --icons -a --group-directories-first {}" \
        --bind=space:toggle-preview \
        --preview-window '30%,right,border-left,<30(down,30%,border-top)' \
        --border=rounded \
        --margin=1% \
        --color=dark \
        --color='pointer:12,bg+:8' \
        --height 100% \
        --reverse \
        --no-scrollbar \
        --header='jump to ' \
        --info=inline-right \
        --header-first \
        --prompt " ") \

        if [ $choice ]
        then
            cd $choice; clear; ls
        else
            return 1
        fi
    }


# ripgrep fzf
fs() {
    if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
    choice=$( \
        rg --hidden \
        --files-with-matches \
        --no-messages "$1" \
        | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' \
        || rg --ignore-case --pretty --context 10 '$1' {}" \
        --preview-window '50%,right,border-left,<50(down,85%,border-top)' \
        --no-scrollbar \
        --margin=1% \
        --color=dark \
        --color='pointer:12,bg+:8' \
        --header='ripgrep ' \
        --info=inline-right \
        --header-first \
        --prompt "👌"
    )

    if [ $choice ]
    then
        nvim $choice
    else
        return 1
    fi
}


# fuzzy jump directory of the selected file
ffj() {
    local file
    local dir
    file=$( \
        find -type f \
        | fzf +m -q "$1" \
        --preview "bat --color always --style=plain {1}" \
        --bind=space:toggle-preview \
        --preview-window '30%,right,border-left,<30(down,30%,border-top)' \
        --border=rounded \
        --margin=1% \
        --color=dark \
        --color='pointer:12,bg+:8' \
        --height 100% \
        --reverse \
        --no-scrollbar \
        --header='jump to file ' \
        --info=inline-right \
        --header-first \
        --prompt " ")\
        && dir=$(dirname "$file") && cd "$dir"; clear; ls
    }

# fuzzy pacman downloads
fpac() {
    choice=$( \
        pacman -Ssq \
        | fzf \
        -m \
        --preview="pacman -Si {}" \
        --preview-window=:hidden \
        --bind=del:toggle-preview \
        --preview-window '30%,right,border-left,<30(down,30%,border-top)' \
        --border=rounded \
        --margin=1% \
        --color=dark \
        --color='pointer:12,bg+:8' \
        --height 100% \
        --reverse \
        --no-scrollbar \
        --header='pacman download ' \
        --info=inline-right \
        --header-first \
        --prompt " ")

    if [ $choice ]
    then
        sudo pacman -S $choice
    else
        return 1
    fi
}

# fuzzy pac remove
fpacr() {
    choice=$( \
        yay -Qq \
        | fzf \
        -q "$1" -m \
        --preview="yay -Si {1}" \
        --preview-window=:hidden \
        --bind=del:toggle-preview \
        --preview-window '30%,right,border-left,<30(down,30%,border-top)' \
        --border=rounded \
        --margin=1% \
        --color=dark \
        --color='pointer:12,bg+:8' \
        --height 100% \
        --reverse \
        --no-scrollbar \
        --header='pac remove ' \
        --info=inline-right \
        --header-first \
        --prompt " ")

    if [ $choice ]
    then
        yay -Rns $choice
    else
        return 1
    fi
}

# fuzzy manpages
# Get the colors in the opened man page itself
export MANPAGER="sh -c 'col -bx | bat -l man -p --paging always'"
fman() {
    batman="man {1} | col -bx | bat --language=man --plain --color always"
    man -k . | sort \
        | awk -v blue=$(tput setaf 4) -v lblue=$(tput setaf 12) -v res=$(tput sgr0) -v bld=$(tput bold) '{ $1=blue bld $1; $2=res lblue;} 1' \
        | fzf  \
        -q "$1" \
        --ansi \
        --tiebreak=begin \
        --margin=1% \
        --prompt=' Man => '  \
        --preview-window '50%,right,border-left,<50(down,85%,border-top)' \
        --preview "${batman}" \
        --bind "enter:execute(man {1})"
    }
